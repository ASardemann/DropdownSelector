{% sw_extends '@Storefront/storefront/component/buy-widget/buy-widget-form.html.twig' %}

{% block buy_widget_buy_form_inner %}
    <form
        id="productDetailPageBuyProductForm"
        action="{{ path('frontend.checkout.line-item.add') }}"
        method="post"
        class="buy-widget"
        data-add-to-cart="true">

        {% set DOWNLOAD_STATE = constant('Shopware\\Core\\Content\\Product\\State::IS_DOWNLOAD') %}
        {% set showQuantitySelect = not product.states is defined or DOWNLOAD_STATE not in product.states or (DOWNLOAD_STATE in product.states and product.maxPurchase !== 1) %}
        {% set buyable = product.available and product.childCount <= 0 and product.calculatedMaxPurchase > 0 %}

        {% block buy_widget_buy_container %}
            {% if buyable %}
                <div class="row g-2 buy-widget-container">
                    {% block buy_widget_buy_quantity_container %}
                        {% if showQuantitySelect %}
                            <div class="col-4 d-flex justify-content-end">
                                {# @deprecated tag:v6.7.0 - Unused variable selectQuantityThreshold will be removed without replacement #}
                                {% set selectQuantityThreshold = 100 %}

                    {% block buy_widget_buy_quantity_input_group %}
                        <div class="input-group product-detail-quantity-group">
                            <select class="form-control js-quantity-selector"
                            name="lineItems[{{ product.id }}][quantity]"
                            aria-label="{{ 'component.product.quantitySelect.label'|trans|striptags }}">
                            {% for quantity in range(product.minPurchase, product.calculatedMaxPurchase, product.purchaseSteps) %}
                            <option value="{{ quantity }}">
                        {{ quantity }}
                    {% if product.translated.packUnit %}
                    {% if quantity > 1 and product.translated.packUnitPlural %}
                    {{ product.translated.packUnitPlural }}
                    {% else %}
                    {{ product.translated.packUnit }}
                  {% endif %}
                      {% endif %}
                     </option>
                      {% endfor %}
                    </select>
                     <span class="custom-dropdown-arrow"></span>
                         </div>
                {% endblock %}
                        </div>
            {% endif %}
        {% endblock %}

                    {% block buy_widget_buy_redirect_input %}
                        {# fallback redirect back to detail page is deactivated via js #}
                        <input type="hidden"
                               name="redirectTo"
                               value="frontend.detail.page">

                        <input type="hidden"
                               name="redirectParameters"
                               data-redirect-parameters="true"
                               value="{{ {productId: product.id}|json_encode }}">
                    {% endblock %}

                    {% block buy_widget_buy_product_buy_info %}
                        <input type="hidden"
                               name="lineItems[{{ product.id }}][id]"
                               value="{{ product.id }}">
                        <input type="hidden"
                               name="lineItems[{{ product.id }}][type]"
                               value="product">
                        <input type="hidden"
                               name="lineItems[{{ product.id }}][referencedId]"
                               value="{{ product.id }}">
                        <input type="hidden"
                               name="lineItems[{{ product.id }}][stackable]"
                               value="1">
                        <input type="hidden"
                               name="lineItems[{{ product.id }}][removable]"
                               value="1">
                    {% endblock %}

                    {% block buy_widget_product_buy_meta %}
                        <input type="hidden"
                               name="product-name"
                               value="{{ product.translated.name }}">
                        <input type="hidden"
                               name="brand-name"
                               value="{{ product.manufacturer.getName() }}">
                    {% endblock %}

                    {% block buy_widget_buy_button_container %}
                        <div class="{% if showQuantitySelect %}col-8{% else %}col-12{% endif %}">
                            {% block buy_widget_buy_button %}
                                <div class="d-grid">
                                    <button class="btn btn-primary btn-buy"
                                            title="{{ 'detail.addProduct'|trans|striptags }}"
                                            aria-label="{{ 'detail.addProduct'|trans|striptags }}">
                                        {{ 'detail.addProduct'|trans|sw_sanitize }}
                                    </button>
                                </div>
                            {% endblock %}
                        </div>
                    {% endblock %}
                </div>
            {% endif %}
        {% endblock %}
    </form>

    <style>
        select.js-quantity-selector {
            max-height: 200px !important;
            overflow-y: auto;
        }
    </style>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const selectElement = document.querySelector('.js-quantity-selector');
            
            if (selectElement) {
                selectElement.addEventListener('mousedown', function(e) {
                    e.preventDefault();
                    
                    const list = document.createElement('div');
                    list.style.position = 'absolute';
                    list.style.maxHeight = '200px';
                    list.style.overflow = 'auto';
                    list.style.border = '1px solid #ccc';
                    list.style.backgroundColor = '#fff';
                    list.style.zIndex = '1000';
                    
                    const rect = this.getBoundingClientRect();
                    const scrollX = window.pageXOffset || document.documentElement.scrollLeft;
                    const scrollY = window.pageYOffset || document.documentElement.scrollTop;
                    
                    list.style.width = rect.width + 'px';
                    list.style.left = (rect.left + scrollX) + 'px';
                    
                    // Berechne die verfügbare Höhe unter und über dem Dropdown
                    const viewportHeight = window.innerHeight;
                    const spaceBelow = viewportHeight - rect.bottom;
                    const spaceAbove = rect.top;
                    
                    // Setze eine maximale Höhe basierend auf dem verfügbaren Platz
                    const maxHeight = Math.min(200, Math.max(spaceBelow, spaceAbove));
                    list.style.maxHeight = maxHeight + 'px';
                    
                    // Positioniere das Dropdown nach oben oder unten
                    if (spaceBelow < 200 && spaceAbove > spaceBelow) {
                        list.style.top = (rect.top + scrollY - maxHeight) + 'px';
                    } else {
                        list.style.top = (rect.bottom + scrollY) + 'px';
                    }
                    
                    // Optionen erstellen
                    Array.from(this.options).forEach(opt => {
                        const item = document.createElement('div');
                        item.textContent = opt.text;
                        item.style.padding = '5px 10px';
                        item.style.cursor = 'pointer';
                        
                        item.addEventListener('click', () => {
                            this.value = opt.value;
                            document.body.removeChild(list);
                            this.dispatchEvent(new Event('change'));
                        });
                        
                        item.addEventListener('mouseover', () => {
                            item.style.backgroundColor = '#f0f0f0';
                        });
                        
                        item.addEventListener('mouseout', () => {
                            item.style.backgroundColor = '#fff';
                        });
                        
                        list.appendChild(item);
                    });
                    
                    document.body.appendChild(list);
                    
                    let lastMouseX = 0;
                    let lastMouseY = 0;
                    
                    // Aktuelle Mausposition tracken
                    function handleMouseMove(e) {
                        lastMouseX = e.clientX;
                        lastMouseY = e.clientY;
                    }
                    
                    // Event Listener für Mausbewegung hinzufügen
                    document.addEventListener('mousemove', handleMouseMove);
                    
                    // Funktion zum sicheren Entfernen des Dropdowns
                    function removeDropdown(force = false) {
                        if (!force && 'ontouchstart' in window === false) { // Nur für Desktop-Geräte
                            const listRect = list.getBoundingClientRect();
                            
                            if (lastMouseX >= listRect.left && lastMouseX <= listRect.right &&
                                lastMouseY >= listRect.top && lastMouseY <= listRect.bottom) {
                                return;
                            }
                        }
                        
                        if (list && list.parentNode) {
                            list.parentNode.removeChild(list);
                        }
                        document.removeEventListener('click', handleClickOutside);
                        window.removeEventListener('scroll', handleScroll);
                        document.removeEventListener('mousemove', handleMouseMove);
                    }
                    
                    // Event-Handler für Klicks außerhalb
                    function handleClickOutside(e) {
                        if (!list.contains(e.target) && e.target !== selectElement) {
                            removeDropdown(true);
                        }
                    }
                    
                    // Scroll-Handler mit Verzögerung
                    let scrollTimeout;
                    function handleScroll(e) {
                        clearTimeout(scrollTimeout);
                        scrollTimeout = setTimeout(() => {
                            removeDropdown();
                        }, 150);
                    }
                    
                    // Event-Listener hinzufügen
                    setTimeout(() => {
                        document.addEventListener('click', handleClickOutside);
                        window.addEventListener('scroll', handleScroll, { passive: true });
                    }, 0);
                });
            }
        });
    </script>
{% endblock %}
